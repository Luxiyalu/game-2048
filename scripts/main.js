// Generated by CoffeeScript 1.7.1
(function() {
  define(['jquery', 'data', 'element', 'gameLogic', 'transform', 'shapes', 'three', 'TrackballControls', 'CSS3DRenderer'], function($, Data, Element, GameLogic, Transform, Shapes) {
    var Game, proto;
    Game = function() {
      Transform.game = this;
      this.init();
      this.reset();
      this.bindEvents();
      return this.animate();
    };
    proto = Game.prototype;
    proto.init = function() {
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 10000);
      this.renderer = new THREE.CSS3DRenderer();
      this.controls = new THREE.TrackballControls(this.camera, $('html')[0]);
      this.controls.rotateSpeed = 0.5;
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      $('#container').append(this.renderer.domElement);
      this.menu = {};
      this.menu.expand = false;
      this.menu.more = false;
      return this.menu.length = $('.sub-controls .button').length;
    };
    proto.reset = function(num, clearBoard) {
      var x;
      if (num == null) {
        num = 4;
      }
      if (isNaN(num) || num !== Math.floor(num) || num < 2) {
        return "Please reset with a natural number that's larger than or equal to 2.";
      }
      this.noPressKey = false;
      Data.numberPerLine = num;
      this.length = Data.numberPerLine * Data.numberPerLine;
      this.objects = new Array(this.length);
      this.controls.minDistance = 100;
      this.controls.maxDistance = 2500 / 4 * Data.numberPerLine;
      GameLogic.init();
      Transform.init();
      this.resetCameraPosition();
      this.clearScene();
      this.resetMenu();
      if (!clearBoard) {
        this.insertNew();
        this.insertNew();
      }
      x = Math.pow(2, this.length);
      return "Game reset with a board " + num + " x " + num + ". Highest possible score for a board this large: " + x + ".";
    };
    proto.resetMenu = function() {
      if (this.menu.expand) {
        return $('.controls .reset-6').trigger('click');
      }
    };
    proto.resetCameraPosition = function() {
      this.camera.position.set(0, 0, 800 / 4 * Data.numberPerLine);
      this.camera.up = new THREE.Vector3(0, 1, 0);
      this.camera.lookAt(new THREE.Vector3(0, 0, 0));
      return window.scene = this.scene;
    };
    proto.bindEvents = function() {
      var moreAnimateIn, moreAnimateOut, self;
      self = this;
      this.controls.addEventListener('change', (function(_this) {
        return function() {
          return _this.render();
        };
      })(this));
      window.addEventListener('resize', (function(_this) {
        return function() {
          _this.camera.aspect = window.innerWidth / window.innerHeight;
          _this.camera.updateProjectionMatrix();
          _this.renderer.setSize(window.innerWidth, window.innerHeight);
          return _this.render();
        };
      })(this), false);
      $(document).keydown((function(_this) {
        return function(e) {
          var coor, direction, i, noMovement, power, _i, _j, _ref, _ref1, _results;
          if (_this.noPressKey) {
            return;
          }
          if (e.which === 38) {
            direction = 'up';
          } else if (e.which === 40) {
            direction = 'down';
          } else if (e.which === 37) {
            direction = 'left';
          } else if (e.which === 39) {
            direction = 'right';
          } else {
            return;
          }
          _this.noPressKey = true;
          setTimeout(function() {
            return _this.noPressKey = false;
          }, Data.timeInterval * 1000);
          _this.targets = GameLogic.getTargets(_this.objects, direction);
          noMovement = (function() {
            _results = [];
            for (var _i = 0, _ref = _this.objects.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this).every(function(e, i, a) {
            var posA, posB;
            if (_this.objects[i] !== void 0) {
              posA = _this.objects[i].position;
              posB = _this.targets[i].position;
              return posA.x === posB.x && posA.y === posB.y;
            } else {
              return true;
            }
          });
          if (noMovement) {
            return;
          }
          Transform.fromTo(_this.objects, _this.targets, Data.timeInterval);
          Transform.killDuplicates(_this.scene, _this.objects, _this.targets, Data.timeInterval);
          _this.objects = Transform.reorderObjects(_this.objects, _this.targets);
          _this.targets = Transform.reorderObjects(_this.targets, _this.targets);
          for (i = _j = 0, _ref1 = _this.objects.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            if (Transform.queue[i]) {
              power = Transform.queue[i];
              coor = Transform.getCoordinate(i);
              _this.insertNew(coor[0], coor[1], power);
            }
          }
          Transform.queue = {};
          return _this.insertNew();
        };
      })(this));
      $('.controls').on('click', '.reset-4', (function(_this) {
        return function() {
          _this.noPressKey = false;
          if (_this.menu.expand) {
            $('.controls .reset-6').trigger('click');
          }
          return _this.reset();
        };
      })(this));
      $('.controls').on('click', '.reset-6', (function(_this) {
        return function() {
          if (!_this.menu.expand) {
            _this.reset(6, true);
            _this.fillBoard();
            return $('.sub-controls .button').each(function(index) {
              return TweenMax.to($(this), 0.5, {
                autoAlpha: 1,
                bottom: 29 * (self.menu.length - index - 1),
                ease: Power3.easeOut,
                onComplete: function() {
                  return self.menu.expand = true;
                }
              });
            });
          } else {
            $('.button.shape').addClass('inactive');
            return $('.sub-controls .button').each(function(index) {
              return TweenMax.to($(this), 0.5, {
                autoAlpha: 0,
                bottom: 0,
                ease: Power3.easeOut,
                onComplete: function() {
                  return self.menu.expand = false;
                }
              });
            });
          }
        };
      })(this));
      $('.controls').on('click', '.shape', function() {
        var shape, targets;
        self.noPressKey = true;
        if ($(this).hasClass('inactive')) {
          return;
        }
        shape = $(this).data('shape');
        targets = Shapes.getTargets(shape);
        return Transform.fromTo(self.objects, targets, 'random');
      });
      $('.info .close').on('click', function() {
        return TweenMax.to($('.info'), 0.3, {
          bottom: -50,
          ease: Power3.easeIn
        });
      });
      moreAnimateOut = (function(_this) {
        return function() {
          _this.menu.more = false;
          return TweenMax.to($('.more'), 0.3, {
            autoAlpha: 0
          });
        };
      })(this);
      moreAnimateIn = (function(_this) {
        return function() {
          _this.menu.more = true;
          return TweenMax.to($('.more'), 0.3, {
            autoAlpha: 1
          });
        };
      })(this);
      $('.controls').on('click', '.more-control', (function(_this) {
        return function() {
          if (!_this.menu.more) {
            return moreAnimateIn();
          } else {
            return moreAnimateOut();
          }
        };
      })(this));
      return $('#container').on('click', (function(_this) {
        return function() {
          return moreAnimateOut();
        };
      })(this));
    };
    proto.fillBoard = function() {
      var fill;
      this.noPressKey = true;
      fill = (function(_this) {
        return function(inc) {
          if (inc === _this.length) {
            setTimeout(function() {
              _this.noPressKey = false;
              return $('.button.shape').removeClass('inactive');
            }, 100 * inc);
          } else {
            setTimeout(function() {
              if (_this.noPressKey) {
                return _this.insertNew('randomPosition');
              }
            }, 100 * inc);
            return fill(inc + 1);
          }
        };
      })(this);
      return fill(0);
    };
    proto.insertNew = function(x, y, pow) {
      var div, i, object, pos, target;
      if (x === void 0 || x === 'randomPosition') {
        i = Transform.getVacantI(this.objects);
        if (i === false) {
          this.gameOver();
          return;
        }
      } else {
        i = Transform.getIndex(x, y);
      }
      div = Element.create(pow);
      object = new THREE.CSS3DObject(div);
      object.div = div;
      pos = Transform.position(i);
      object.position.x = pos[0];
      object.position.y = pos[1];
      this.scene.add(object);
      $(div).fadeIn();
      this.render();
      object.power = $(div).data('power');
      this.objects[i] = object;
      if (x === 'randomPosition') {
        target = {};
        target.position = {};
        target.position.x = object.position.x;
        target.position.y = object.position.y;
        target.position.z = object.position.z;
        object.position.x = 1000 * (0.5 - Math.random());
        object.position.y = 1000 * (0.5 - Math.random());
        object.position.z = 2000;
        return Transform.fromTo([object], [target], 2 + Math.random());
      }
    };
    proto.clearScene = function() {
      return this.scene.children.slice().forEach((function(_this) {
        return function(child, i, a) {
          return _this.scene.remove(child);
        };
      })(this));
    };
    proto.gameOver = function() {};
    proto.render = function() {
      return this.renderer.render(this.scene, this.camera);
    };
    proto.animate = function() {
      requestAnimationFrame((function(_this) {
        return function() {
          return _this.animate();
        };
      })(this));
      return this.controls.update();
    };
    return window.game = new Game();
  });

}).call(this);

//# sourceMappingURL=main.map
